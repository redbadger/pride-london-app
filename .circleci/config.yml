get-cache: &get-cache
  restore_cache:
    key: dependencies-{{ checksum "package.json" }}
save-cache: &save-cache
  save_cache:
    paths:
      - node_modules
    key: dependencies-{{ checksum "package.json" }}
get-cache-osx: &get-cache-osx
  restore_cache:
    key: osx-dependencies-{{ checksum "../package.json" }}
save-cache-osx: &save-cache-osx
  save_cache:
    paths:
      - /Users/distiller/project/node_modules
    key: osx-dependencies-{{ checksum "../package.json" }}
android-secrets: &android-secrets
  run:
    command: |
      git clone git@github.com:redbadger/pride-android-secrets.git
      mkdir -p .gradle
      echo -e "keystore=$ANDROID_KEYSTORE_PATH\nkeystore.alias=$ANDROID_KEYSTORE_ALIAS\nkeystore.password=$ANDROID_KEYSTORE_PASSWORD\nkeystore.keypass=$ANDROID_KEYSTORE_PASSWORD\nversionCode=$CIRCLE_BUILD_NUM" > .gradle/gradle.properties
android-release-secrets: &android-release-secrets
  run:
    command: |
      git clone git@github.com:redbadger/pride-android-secrets.git
      mkdir -p .gradle
      echo -e "keystore=$ANDROID_RELEASE_KEYSTORE_PATH\nkeystore.alias=$ANDROID_RELEASE_KEYSTORE_ALIAS\nkeystore.password=$ANDROID_RELEASE_KEYSTORE_PASSWORD\nkeystore.keypass=$ANDROID_RELEASE_KEYSTORE_PASSWORD\nversionCode=$CIRCLE_BUILD_NUM" > .gradle/gradle.properties
fabric-android-secrets: &fabric-android-secrets
  run:
    command: |
      echo -e "apiSecret=$FABRIC_BUILD_SECRET\napiKey=$FABRIC_API_KEY" >> ./app/fabric.properties
ruby-dependencies: &ruby-dependencies
  run:
    name: Download Ruby Dependencies
    command: bundle install --path vendor/bundle
android-dependencies: &android-dependencies
  run:
    name: Download Android Dependencies
    command: ./gradlew androidDependencies
gradle-key: &gradle-key
  jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
gems-key: &gems-key
  gems-{{ checksum "Gemfile.lock" }}
brew-key: &brew-key
  brew-{{ checksum "BrewFile" }}
restore-gradle-cache: &restore-gradle-cache
  restore_cache:
    key: *gradle-key
restore-gems-cache: &restore-gems-cache
  restore_cache:
    key: *gems-key
restore-brew-cache: &restore-brew-cache
  restore_cache:
    key: *brew-key
save-gradle-cache: &save-gradle-cache
  save_cache:
    key: *gradle-key
    paths:
      - ~/.gradle
      - ~/.m2
save-gems-cache: &save-gems-cache
  save_cache:
    key: *gems-key
    paths:
      - vendor/bundle
save-brew-cache: &save-brew-cache
  save_cache:
    key: *brew-key
    paths:
      - /usr/local/Homebrew

version: 2
jobs:
  # build is a reserved job name for running circleci locally
  build:
    docker:
      - image: circleci/node:9.3
    working_directory: ~/project
    steps:
      - checkout
      - <<: *get-cache
      - run:
          name: Test reporter status
          command: |
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
              ./cc-test-reporter before-build
      - run:
          name: Install dependencies
          command: yarn install
      - <<: *save-cache
      - run:
          name: Lint source
          command: yarn lint
      - run:
          name: Type check
          command: yarn flow
      - run:
          name: Unit test
          command: |
              yarn test
              ./cc-test-reporter after-build
      - run:
          name: Generate .env
          command: node ./scripts/generate-dotenv.js
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
            - .env

  alpha-android:
    working_directory: ~/project/android
    docker:
      - image: circleci/android:api-27-node8-alpha
    environment:
      TERM: dumb
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      APK_PATH: "./app/build/outputs/apk/alpha/release/app-alpha-release.apk"
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - <<: *android-secrets
      - <<: *fabric-android-secrets
      - <<: *restore-gradle-cache
      - <<: *restore-gems-cache
      - <<: *ruby-dependencies
      - <<: *android-dependencies
      - <<: *save-gradle-cache
      - <<: *save-gems-cache
      - run:
            command: |
                bundle exec fastlane alpha \
                submit:true \
                apk_path:$APK_PATH \
                api_token:$HOCKEY_APP_TOKEN \
                app_id:$HOCKEY_APP_ANDROID_ALPHA_APP_ID \
                fabric_api_token:$FABRIC_API_KEY \
                fabric_build_secret:$FABRIC_BUILD_SECRET \
                fabric_groups:$FABRIC_GROUPS \
                commit_sha:$CIRCLE_SHA1
      - store_artifacts:
          path: ~/project/android/app/build/outputs

  beta-android:
    working_directory: ~/project/android
    docker:
      - image: circleci/android:api-27-node8-alpha
    environment:
      TERM: dumb
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      APK_PATH: "./app/build/outputs/apk/beta/release/app-beta-release.apk"
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - <<: *android-secrets
      - <<: *fabric-android-secrets
      - <<: *restore-gradle-cache
      - <<: *restore-gems-cache
      - <<: *ruby-dependencies
      - <<: *android-dependencies
      - <<: *save-gradle-cache
      - <<: *save-gems-cache
      - run:
            command: |
                bundle exec fastlane beta \
                submit:true \
                apk_path:$APK_PATH \
                api_token:$HOCKEY_APP_TOKEN \
                app_id:$HOCKEY_APP_ANDROID_BETA_APP_ID \
                fabric_api_token:$FABRIC_API_KEY \
                fabric_build_secret:$FABRIC_BUILD_SECRET \
                fabric_groups:$FABRIC_GROUPS \
                commit_sha:$CIRCLE_SHA1
      - store_artifacts:
          path: ~/project/android/app/build/outputs

  release-android:
    working_directory: ~/project/android
    docker:
      - image: circleci/android:api-27-node8-alpha
    environment:
      TERM: dumb
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      APK_PATH: "./app/build/outputs/apk/production/release/app-production-release.apk"
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - <<: *android-release-secrets
      - <<: *fabric-android-secrets
      - <<: *restore-gradle-cache
      - <<: *restore-gems-cache
      - <<: *ruby-dependencies
      - <<: *android-dependencies
      - <<: *save-gradle-cache
      - <<: *save-gems-cache
      - run:
            command: |
                bundle exec fastlane release \
                submit:true \
                apk_path:$APK_PATH \
                upload_key:$PLAY_STORE_UPLOAD_KEY_PATH

  alpha-ios:
    macos:
      xcode: "9.2.0"
    working_directory: /Users/distiller/project/ios
    environment:
      FL_OUTPUT_DIR: /Users/distiller/project/output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: /Users/distiller/project
      - run:
          name: Set Ruby Version
          command:  echo "ruby-2.4" > ~/.ruby-version
      # Not using a workspace here as Node and Yarn versions
      # differ between the macOS image and the Docker containers above.
      - <<: *restore-gems-cache
      - <<: *ruby-dependencies
      - <<: *save-gems-cache
      - <<: *get-cache-osx
      - run:
          name: Set npm version
          command: |
              npm i -g n
              sudo n 9.3
      - run:
          name: Install dependencies
          command: yarn install
      - <<: *save-cache-osx
      - run:
          name: Generate .env
          command: node ./scripts/generate-dotenv.js
          working_directory: /Users/distiller/project
      - run:
          name: Set Fabric secret
          command: echo -e "$FABRIC_API_KEY\n$FABRIC_BUILD_SECRET" >> ./PrideLondonApp/fabric.properties
      - run:
            command: |
                bundle exec fastlane alpha \
                submit:true \
                api_token:$HOCKEY_APP_TOKEN \
                app_id:$HOCKEY_APP_IOS_ALPHA_APP_ID \
                fabric_api_token:$FABRIC_API_KEY \
                fabric_build_secret:$FABRIC_BUILD_SECRET \
                fabric_groups:$FABRIC_GROUPS \
                ci_build_num:$CIRCLE_BUILD_NUM \
                commit_sha:$CIRCLE_SHA1
      - store_artifacts:
          path: /Users/distiller/project/output

  beta-ios:
    macos:
      xcode: "9.2.0"
    working_directory: /Users/distiller/project/ios
    environment:
      FL_OUTPUT_DIR: /Users/distiller/project/output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: /Users/distiller/project
      - run:
          name: Set Ruby Version
          command:  echo "ruby-2.4" > ~/.ruby-version
      # Not using a workspace here as Node and Yarn versions
      # differ between the macOS image and the Docker containers above.
      - <<: *restore-gems-cache
      - <<: *ruby-dependencies
      - <<: *save-gems-cache
      - <<: *get-cache-osx
      - run:
          name: Set npm version
          command: |
              npm i -g n
              sudo n 9.3
      - run:
          name: Install dependencies
          command: yarn install
      - <<: *save-cache-osx
      - run:
          name: Generate .env
          command: node ./scripts/generate-dotenv.js
          working_directory: /Users/distiller/project
      - run:
          name: Set Fabric secret
          command: echo -e "$FABRIC_API_KEY\n$FABRIC_BUILD_SECRET" >> ./PrideLondonApp/fabric.properties
      - run:
            command: |
                bundle exec fastlane beta \
                submit:true \
                api_token:$HOCKEY_APP_TOKEN \
                app_id:$HOCKEY_APP_IOS_BETA_APP_ID \
                fabric_api_token:$FABRIC_API_KEY \
                fabric_build_secret:$FABRIC_BUILD_SECRET \
                fabric_groups:$FABRIC_GROUPS \
                ci_build_num:$CIRCLE_BUILD_NUM \
                commit_sha:$CIRCLE_SHA1

  release-ios:
    macos:
      xcode: "9.2.0"
    working_directory: /Users/distiller/project/ios
    environment:
      FL_OUTPUT_DIR: /Users/distiller/project/output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: /Users/distiller/project
      - run:
          name: Set Ruby Version
          command:  echo "ruby-2.4" > ~/.ruby-version
      # Not using a workspace here as Node and Yarn versions
      # differ between the macOS image and the Docker containers above.
      - <<: *restore-gems-cache
      - <<: *ruby-dependencies
      - <<: *save-gems-cache
      - <<: *get-cache-osx
      - run:
          name: Set npm version
          command: |
              npm i -g n
              sudo n 9.3
      - run:
          name: Install dependencies
          command: yarn install
      - <<: *save-cache-osx
      - run:
          name: Generate .env
          command: node ./scripts/generate-dotenv.js
          working_directory: /Users/distiller/project
      - run:
          name: Set Fabric secret
          command: echo -e "$FABRIC_API_KEY\n$FABRIC_BUILD_SECRET" >> ./PrideLondonApp/fabric.properties
      - run:
            command: |
                bundle exec fastlane release \
                submit:true

  e2e-ios:
    macos:
      xcode: "9.2.0"
    working_directory: /Users/distiller/project/
    environment:
      FL_OUTPUT_DIR: /Users/distiller/project/output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: /Users/distiller/project
      - run:
          name: Set Ruby Version
          command:  echo "ruby-2.4" > ~/.ruby-version
      # Not using a workspace here as Node and Yarn versions
      # differ between the macOS image and the Docker containers above.
      - run:
          name: Pre-start simulator
          command: xcrun simctl boot "iPhone 7" || true
      - <<: *restore-brew-cache
      - run:
          name: Install HomeBrew dependencies
          command: |
              brew tap homebrew/bundle
              brew bundle
      - <<: *save-brew-cache
      - run:
          name: Set npm version and install global npm dependencies
          command: |
              npm i -g n
              sudo n 9.3
              npm i -g detox-cli
              npm i -g react-native-cli
      - restore_cache:
          key: osx-dependencies-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          paths:
            - /Users/distiller/project/node_modules
          key: osx-dependencies-{{ checksum "package.json" }}
      - run:
          name: Generate .env
          command: node ./scripts/generate-dotenv.js
          working_directory: /Users/distiller/project
      - run: yarn test:e2e

workflows:
  version: 2
  node-android-ios:
    jobs:
      - build
      - e2e-ios:
          requires:
            - build
      - alpha-android:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
      - alpha-ios:
          filters:
            branches:
              ignore:
                - master
      - beta-android:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - beta-ios:
          filters:
            branches:
              only:
                - master
      - release-android:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - release-ios:
          filters:
            branches:
              only:
                - master

